# Task Management System - API Testing & Report

## **Project Overview**

This document provides a structured report on the testing of the **Task Management System** using Postman. The system allows users to perform CRUD (Create, Read, Update, Delete) operations on tasks, categorized and tracked with statuses.

---

## **1. Start the Spring Boot Application**

Before testing, ensure the application is running. Use the following command:

```sh
mvn spring-boot:run
```

‚úÖ The server should be running at `http://localhost:8080`.

---

## **2. API Endpoints and Testing**

### \*\*1Ô∏è‚É£ Create Tasks (POST `/tasks`)

- **Method:** `POST`
- **URL:** `http://localhost:8080/tasks`
- **Headers:** `Content-Type: application/json`
- **Body (JSON):**

```json
{
  "title": "Learn Spring Boot",
  "description": "Study Spring Boot basics",
  "status": "Pending",
  "dueDate": "2025-03-01T00:00:00.000+00:00",
  "categories": ["Work", "Spring"]
}
```

‚úÖ **Expected Response:**

- `201 Created` with the created task details.

üìå **Repeat this for 10 tasks** with unique titles, statuses (`Pending`, `In Progress`, `Completed`), and categories.

---

### \*\*2Ô∏è‚É£ Get All Tasks (GET `/tasks`)

- **Method:** `GET`
- **URL:** `http://localhost:8080/tasks`

‚úÖ **Expected Response:**

- A list of all created tasks.
- Screenshot: `Get_All_Tasks.png`

---

### \*\*3Ô∏è‚É£ Get Unique Categories (GET `/tasks/categories`)

- **Method:** `GET`
- **URL:** `http://localhost:8080/tasks/categories`

‚úÖ **Expected Response:**

- A list of all unique categories used in tasks.
- Screenshot: `Get_Categories.png`

---

### \*\*4Ô∏è‚É£ Update a Task (PUT `/tasks/{id}`)

- **Method:** `PUT`
- **URL:** `http://localhost:8080/tasks/1` (replace `1` with an actual task ID)
- **Headers:** `Content-Type: application/json`
- **Body (JSON):**

```json
{
  "title": "Learn Spring Boot - Advanced",
  "description": "Deep dive into Spring Boot",
  "status": "In Progress",
  "dueDate": "2025-03-10T00:00:00.000+00:00",
  "categories": ["Work", "Spring Boot"]
}
```

‚úÖ **Expected Response:**

- `200 OK` with updated task details.
- Screenshot: `Update_Task.png`

---

### \*\*5Ô∏è‚É£ Delete a Task (DELETE `/tasks/{id}`)

- **Method:** `DELETE`
- **URL:** `http://localhost:8080/tasks/2` (replace `2` with an actual task ID)

‚úÖ **Expected Response:**

- `204 No Content` (Task deleted successfully).
- Screenshot: `Delete_Task.png`

---

## **3. Summary & Next Steps**

‚úÖ **CRUD Operations Successfully Tested:**

- **C** - Create Tasks ‚úÖ
- **R** - Retrieve Tasks & Categories ‚úÖ
- **U** - Update Tasks ‚úÖ
- **D** - Delete Tasks ‚úÖ

### **Next Steps:**

- Store screenshots in a structured folder.
- Convert this document into a `README.md` for GitHub.
- Consider adding pagination and sorting features.
- Connect the system to MySQL instead of H2 for real data storage.

üöÄ **Well done! Now push the project and report to GitHub!**

